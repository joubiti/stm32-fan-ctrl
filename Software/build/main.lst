ARM GAS  /tmp/ccZOvdLJ.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB316:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
ARM GAS  /tmp/ccZOvdLJ.s 			page 2


  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  44:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** UART_HandleTypeDef huart1;
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* USER CODE BEGIN PV */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE END PV */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  53:Core/Src/main.c **** void SystemClock_Config(void);
  54:Core/Src/main.c **** static void MX_GPIO_Init(void);
  55:Core/Src/main.c **** static void MX_TIM3_Init(void);
  56:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  57:Core/Src/main.c **** static void MX_TIM1_Init(void);
  58:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** /* USER CODE END PFP */
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  63:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  64:Core/Src/main.c **** static heartbeat_led_t heartbeat_led;
  65:Core/Src/main.c **** static volatile uint8_t cnt = 3;
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** volatile uint32_t captureValue = 0;
  70:Core/Src/main.c **** volatile uint32_t previousCaptureValue = 0;
  71:Core/Src/main.c **** volatile uint32_t frequency = 0;
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
  74:Core/Src/main.c ****     if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
  75:Core/Src/main.c ****         captureValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
  76:Core/Src/main.c ****         frequency = HAL_RCC_GetPCLK1Freq() / (captureValue - previousCaptureValue);
  77:Core/Src/main.c ****         previousCaptureValue = captureValue;
  78:Core/Src/main.c ****     }
  79:Core/Src/main.c **** }
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** 
  82:Core/Src/main.c **** /* USER CODE END 0 */
  83:Core/Src/main.c **** 
  84:Core/Src/main.c **** /**
  85:Core/Src/main.c ****   * @brief  The application entry point.
  86:Core/Src/main.c ****   * @retval int
  87:Core/Src/main.c ****   */
  88:Core/Src/main.c **** int main(void)
  89:Core/Src/main.c **** {
  90:Core/Src/main.c **** 
ARM GAS  /tmp/ccZOvdLJ.s 			page 3


  91:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* USER CODE END 1 */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  98:Core/Src/main.c ****   HAL_Init();
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* USER CODE END Init */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* Configure the system clock */
 105:Core/Src/main.c ****   SystemClock_Config();
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   /* USER CODE END SysInit */
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   /* Initialize all configured peripherals */
 112:Core/Src/main.c ****   MX_GPIO_Init();
 113:Core/Src/main.c ****   MX_TIM3_Init();
 114:Core/Src/main.c ****   MX_USART1_UART_Init();
 115:Core/Src/main.c ****   MX_TIM1_Init();
 116:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 117:Core/Src/main.c **** 
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   /*****************   Initialize logging subsystem, mapped to UART1 **************/
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****   logging_subsystem_init(&huart1);
 122:Core/Src/main.c ****   logging_set_message_frequency(2000);
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****   /*****************    Initialize heartbeat LED (1 Hz)           *****************/
 125:Core/Src/main.c **** 
 126:Core/Src/main.c ****   heartbeat_initialize(&heartbeat_led, 30000);
 127:Core/Src/main.c ****   heartbeat_on(&heartbeat_led);
 128:Core/Src/main.c **** 
 129:Core/Src/main.c ****   /********************************************************************/
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****   HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 132:Core/Src/main.c **** 
 133:Core/Src/main.c **** 
 134:Core/Src/main.c **** 
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   /* USER CODE END 2 */
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   /* Infinite loop */
 139:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 140:Core/Src/main.c ****   while (1)
 141:Core/Src/main.c ****   {
 142:Core/Src/main.c ****     /* USER CODE END WHILE */
 143:Core/Src/main.c **** 
 144:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 145:Core/Src/main.c **** 
 146:Core/Src/main.c ****     heartbeat_toggle(&heartbeat_led, HAL_GetTick());
 147:Core/Src/main.c ****     logging_send_periodic_msg(HAL_GetTick(), "Frequency is %d \n", frequency);
ARM GAS  /tmp/ccZOvdLJ.s 			page 4


 148:Core/Src/main.c **** 
 149:Core/Src/main.c **** 
 150:Core/Src/main.c ****   }
 151:Core/Src/main.c ****   /* USER CODE END 3 */
 152:Core/Src/main.c **** }
 153:Core/Src/main.c **** 
 154:Core/Src/main.c **** /**
 155:Core/Src/main.c ****   * @brief System Clock Configuration
 156:Core/Src/main.c ****   * @retval None
 157:Core/Src/main.c ****   */
 158:Core/Src/main.c **** void SystemClock_Config(void)
 159:Core/Src/main.c **** {
 160:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 161:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 164:Core/Src/main.c ****   */
 165:Core/Src/main.c ****   HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 168:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 169:Core/Src/main.c ****   */
 170:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 171:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 172:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 173:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 174:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 175:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 8;
 176:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 177:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 178:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 179:Core/Src/main.c ****   {
 180:Core/Src/main.c ****     Error_Handler();
 181:Core/Src/main.c ****   }
 182:Core/Src/main.c **** 
 183:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 184:Core/Src/main.c ****   */
 185:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 186:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 187:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 188:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 189:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 192:Core/Src/main.c ****   {
 193:Core/Src/main.c ****     Error_Handler();
 194:Core/Src/main.c ****   }
 195:Core/Src/main.c **** }
 196:Core/Src/main.c **** 
 197:Core/Src/main.c **** /**
 198:Core/Src/main.c ****   * @brief TIM1 Initialization Function
 199:Core/Src/main.c ****   * @param None
 200:Core/Src/main.c ****   * @retval None
 201:Core/Src/main.c ****   */
 202:Core/Src/main.c **** static void MX_TIM1_Init(void)
 203:Core/Src/main.c **** {
 204:Core/Src/main.c **** 
ARM GAS  /tmp/ccZOvdLJ.s 			page 5


 205:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 210:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 211:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 212:Core/Src/main.c **** 
 213:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 216:Core/Src/main.c ****   htim1.Instance = TIM1;
 217:Core/Src/main.c ****   htim1.Init.Prescaler = 0;
 218:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 219:Core/Src/main.c ****   htim1.Init.Period = 65535;
 220:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 221:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 222:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 223:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 224:Core/Src/main.c ****   {
 225:Core/Src/main.c ****     Error_Handler();
 226:Core/Src/main.c ****   }
 227:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 228:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 229:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 230:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 231:Core/Src/main.c ****   {
 232:Core/Src/main.c ****     Error_Handler();
 233:Core/Src/main.c ****   }
 234:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 235:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 236:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 237:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 238:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 239:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 240:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 241:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 242:Core/Src/main.c ****   {
 243:Core/Src/main.c ****     Error_Handler();
 244:Core/Src/main.c ****   }
 245:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 246:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 247:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 248:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 249:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 250:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 251:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 252:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 253:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 254:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 255:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 256:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 257:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 258:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 259:Core/Src/main.c ****   {
 260:Core/Src/main.c ****     Error_Handler();
 261:Core/Src/main.c ****   }
ARM GAS  /tmp/ccZOvdLJ.s 			page 6


 262:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 263:Core/Src/main.c **** 
 264:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 265:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim1);
 266:Core/Src/main.c **** 
 267:Core/Src/main.c **** }
 268:Core/Src/main.c **** 
 269:Core/Src/main.c **** /**
 270:Core/Src/main.c ****   * @brief TIM3 Initialization Function
 271:Core/Src/main.c ****   * @param None
 272:Core/Src/main.c ****   * @retval None
 273:Core/Src/main.c ****   */
 274:Core/Src/main.c **** static void MX_TIM3_Init(void)
 275:Core/Src/main.c **** {
 276:Core/Src/main.c **** 
 277:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
 278:Core/Src/main.c **** 
 279:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 280:Core/Src/main.c **** 
 281:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 282:Core/Src/main.c ****   TIM_IC_InitTypeDef sConfigIC = {0};
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 285:Core/Src/main.c **** 
 286:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 287:Core/Src/main.c ****   htim3.Instance = TIM3;
 288:Core/Src/main.c ****   htim3.Init.Prescaler = 127;
 289:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 290:Core/Src/main.c ****   htim3.Init.Period = 99;
 291:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 292:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 293:Core/Src/main.c ****   if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 294:Core/Src/main.c ****   {
 295:Core/Src/main.c ****     Error_Handler();
 296:Core/Src/main.c ****   }
 297:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 298:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 299:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 300:Core/Src/main.c ****   {
 301:Core/Src/main.c ****     Error_Handler();
 302:Core/Src/main.c ****   }
 303:Core/Src/main.c ****   sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 304:Core/Src/main.c ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 305:Core/Src/main.c ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 306:Core/Src/main.c ****   sConfigIC.ICFilter = 0;
 307:Core/Src/main.c ****   if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 308:Core/Src/main.c ****   {
 309:Core/Src/main.c ****     Error_Handler();
 310:Core/Src/main.c ****   }
 311:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 312:Core/Src/main.c **** 
 313:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
 314:Core/Src/main.c **** 
 315:Core/Src/main.c **** }
 316:Core/Src/main.c **** 
 317:Core/Src/main.c **** /**
 318:Core/Src/main.c ****   * @brief USART1 Initialization Function
ARM GAS  /tmp/ccZOvdLJ.s 			page 7


 319:Core/Src/main.c ****   * @param None
 320:Core/Src/main.c ****   * @retval None
 321:Core/Src/main.c ****   */
 322:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 323:Core/Src/main.c **** {
 324:Core/Src/main.c **** 
 325:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 326:Core/Src/main.c **** 
 327:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 328:Core/Src/main.c **** 
 329:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 330:Core/Src/main.c **** 
 331:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 332:Core/Src/main.c ****   huart1.Instance = USART1;
 333:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 334:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 335:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 336:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 337:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 338:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 339:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 340:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 341:Core/Src/main.c ****   huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 342:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 343:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 344:Core/Src/main.c ****   {
 345:Core/Src/main.c ****     Error_Handler();
 346:Core/Src/main.c ****   }
 347:Core/Src/main.c ****   if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 348:Core/Src/main.c ****   {
 349:Core/Src/main.c ****     Error_Handler();
 350:Core/Src/main.c ****   }
 351:Core/Src/main.c ****   if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 352:Core/Src/main.c ****   {
 353:Core/Src/main.c ****     Error_Handler();
 354:Core/Src/main.c ****   }
 355:Core/Src/main.c ****   if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 356:Core/Src/main.c ****   {
 357:Core/Src/main.c ****     Error_Handler();
 358:Core/Src/main.c ****   }
 359:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 360:Core/Src/main.c **** 
 361:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 362:Core/Src/main.c **** 
 363:Core/Src/main.c **** }
 364:Core/Src/main.c **** 
 365:Core/Src/main.c **** /**
 366:Core/Src/main.c ****   * @brief GPIO Initialization Function
 367:Core/Src/main.c ****   * @param None
 368:Core/Src/main.c ****   * @retval None
 369:Core/Src/main.c ****   */
 370:Core/Src/main.c **** static void MX_GPIO_Init(void)
 371:Core/Src/main.c **** {
  26              		.loc 1 371 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 40
  29              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccZOvdLJ.s 			page 8


  30 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 20
  33              		.cfi_offset 4, -20
  34              		.cfi_offset 5, -16
  35              		.cfi_offset 6, -12
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 8BB0     		sub	sp, sp, #44
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 64
 372:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 372 3 view .LVU1
  42              		.loc 1 372 20 is_stmt 0 view .LVU2
  43 0004 05AC     		add	r4, sp, #20
  44 0006 1422     		movs	r2, #20
  45 0008 0021     		movs	r1, #0
  46 000a 2000     		movs	r0, r4
  47 000c FFF7FEFF 		bl	memset
  48              	.LVL0:
 373:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
 374:Core/Src/main.c **** 
 375:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
 376:Core/Src/main.c **** 
 377:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 378:Core/Src/main.c ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  49              		.loc 1 378 3 is_stmt 1 view .LVU3
  50              	.LBB4:
  51              		.loc 1 378 3 view .LVU4
  52              		.loc 1 378 3 view .LVU5
  53 0010 194B     		ldr	r3, .L2
  54 0012 596B     		ldr	r1, [r3, #52]
  55 0014 2022     		movs	r2, #32
  56 0016 1143     		orrs	r1, r2
  57 0018 5963     		str	r1, [r3, #52]
  58              		.loc 1 378 3 view .LVU6
  59 001a 596B     		ldr	r1, [r3, #52]
  60 001c 0A40     		ands	r2, r1
  61 001e 0192     		str	r2, [sp, #4]
  62              		.loc 1 378 3 view .LVU7
  63 0020 019A     		ldr	r2, [sp, #4]
  64              	.LBE4:
  65              		.loc 1 378 3 view .LVU8
 379:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  66              		.loc 1 379 3 view .LVU9
  67              	.LBB5:
  68              		.loc 1 379 3 view .LVU10
  69              		.loc 1 379 3 view .LVU11
  70 0022 596B     		ldr	r1, [r3, #52]
  71 0024 0422     		movs	r2, #4
  72 0026 1143     		orrs	r1, r2
  73 0028 5963     		str	r1, [r3, #52]
  74              		.loc 1 379 3 view .LVU12
  75 002a 596B     		ldr	r1, [r3, #52]
  76 002c 0A40     		ands	r2, r1
  77 002e 0292     		str	r2, [sp, #8]
  78              		.loc 1 379 3 view .LVU13
ARM GAS  /tmp/ccZOvdLJ.s 			page 9


  79 0030 029A     		ldr	r2, [sp, #8]
  80              	.LBE5:
  81              		.loc 1 379 3 view .LVU14
 380:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  82              		.loc 1 380 3 view .LVU15
  83              	.LBB6:
  84              		.loc 1 380 3 view .LVU16
  85              		.loc 1 380 3 view .LVU17
  86 0032 596B     		ldr	r1, [r3, #52]
  87 0034 0222     		movs	r2, #2
  88 0036 1143     		orrs	r1, r2
  89 0038 5963     		str	r1, [r3, #52]
  90              		.loc 1 380 3 view .LVU18
  91 003a 596B     		ldr	r1, [r3, #52]
  92 003c 0A40     		ands	r2, r1
  93 003e 0392     		str	r2, [sp, #12]
  94              		.loc 1 380 3 view .LVU19
  95 0040 039A     		ldr	r2, [sp, #12]
  96              	.LBE6:
  97              		.loc 1 380 3 view .LVU20
 381:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  98              		.loc 1 381 3 view .LVU21
  99              	.LBB7:
 100              		.loc 1 381 3 view .LVU22
 101              		.loc 1 381 3 view .LVU23
 102 0042 5A6B     		ldr	r2, [r3, #52]
 103 0044 0125     		movs	r5, #1
 104 0046 2A43     		orrs	r2, r5
 105 0048 5A63     		str	r2, [r3, #52]
 106              		.loc 1 381 3 view .LVU24
 107 004a 5B6B     		ldr	r3, [r3, #52]
 108 004c 2B40     		ands	r3, r5
 109 004e 0493     		str	r3, [sp, #16]
 110              		.loc 1 381 3 view .LVU25
 111 0050 049B     		ldr	r3, [sp, #16]
 112              	.LBE7:
 113              		.loc 1 381 3 view .LVU26
 382:Core/Src/main.c **** 
 383:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 384:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 114              		.loc 1 384 3 view .LVU27
 115 0052 8027     		movs	r7, #128
 116 0054 BF01     		lsls	r7, r7, #6
 117 0056 094E     		ldr	r6, .L2+4
 118 0058 0022     		movs	r2, #0
 119 005a 3900     		movs	r1, r7
 120 005c 3000     		movs	r0, r6
 121 005e FFF7FEFF 		bl	HAL_GPIO_WritePin
 122              	.LVL1:
 385:Core/Src/main.c **** 
 386:Core/Src/main.c ****   /*Configure GPIO pin : PB13 */
 387:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_13;
 123              		.loc 1 387 3 view .LVU28
 124              		.loc 1 387 23 is_stmt 0 view .LVU29
 125 0062 0597     		str	r7, [sp, #20]
 388:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 126              		.loc 1 388 3 is_stmt 1 view .LVU30
ARM GAS  /tmp/ccZOvdLJ.s 			page 10


 127              		.loc 1 388 24 is_stmt 0 view .LVU31
 128 0064 0695     		str	r5, [sp, #24]
 389:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 129              		.loc 1 389 3 is_stmt 1 view .LVU32
 130              		.loc 1 389 24 is_stmt 0 view .LVU33
 131 0066 0023     		movs	r3, #0
 132 0068 0793     		str	r3, [sp, #28]
 390:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 133              		.loc 1 390 3 is_stmt 1 view .LVU34
 134              		.loc 1 390 25 is_stmt 0 view .LVU35
 135 006a 0893     		str	r3, [sp, #32]
 391:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 136              		.loc 1 391 3 is_stmt 1 view .LVU36
 137 006c 2100     		movs	r1, r4
 138 006e 3000     		movs	r0, r6
 139 0070 FFF7FEFF 		bl	HAL_GPIO_Init
 140              	.LVL2:
 392:Core/Src/main.c **** 
 393:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 394:Core/Src/main.c **** 
 395:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 396:Core/Src/main.c **** }
 141              		.loc 1 396 1 is_stmt 0 view .LVU37
 142 0074 0BB0     		add	sp, sp, #44
 143              		@ sp needed
 144 0076 F0BD     		pop	{r4, r5, r6, r7, pc}
 145              	.L3:
 146              		.align	2
 147              	.L2:
 148 0078 00100240 		.word	1073876992
 149 007c 00040050 		.word	1342178304
 150              		.cfi_endproc
 151              	.LFE316:
 153              		.section	.text.HAL_TIM_IC_CaptureCallback,"ax",%progbits
 154              		.align	1
 155              		.global	HAL_TIM_IC_CaptureCallback
 156              		.syntax unified
 157              		.code	16
 158              		.thumb_func
 160              	HAL_TIM_IC_CaptureCallback:
 161              	.LVL3:
 162              	.LFB310:
  73:Core/Src/main.c ****     if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 163              		.loc 1 73 58 is_stmt 1 view -0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
  73:Core/Src/main.c ****     if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 167              		.loc 1 73 58 is_stmt 0 view .LVU39
 168 0000 70B5     		push	{r4, r5, r6, lr}
 169              	.LCFI2:
 170              		.cfi_def_cfa_offset 16
 171              		.cfi_offset 4, -16
 172              		.cfi_offset 5, -12
 173              		.cfi_offset 6, -8
 174              		.cfi_offset 14, -4
  74:Core/Src/main.c ****         captureValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
ARM GAS  /tmp/ccZOvdLJ.s 			page 11


 175              		.loc 1 74 5 is_stmt 1 view .LVU40
  74:Core/Src/main.c ****         captureValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 176              		.loc 1 74 13 is_stmt 0 view .LVU41
 177 0002 037F     		ldrb	r3, [r0, #28]
  74:Core/Src/main.c ****         captureValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 178              		.loc 1 74 8 view .LVU42
 179 0004 012B     		cmp	r3, #1
 180 0006 00D0     		beq	.L6
 181              	.LVL4:
 182              	.L4:
  79:Core/Src/main.c **** 
 183              		.loc 1 79 1 view .LVU43
 184              		@ sp needed
 185 0008 70BD     		pop	{r4, r5, r6, pc}
 186              	.LVL5:
 187              	.L6:
  75:Core/Src/main.c ****         frequency = HAL_RCC_GetPCLK1Freq() / (captureValue - previousCaptureValue);
 188              		.loc 1 75 9 is_stmt 1 view .LVU44
  75:Core/Src/main.c ****         frequency = HAL_RCC_GetPCLK1Freq() / (captureValue - previousCaptureValue);
 189              		.loc 1 75 24 is_stmt 0 view .LVU45
 190 000a 0421     		movs	r1, #4
 191 000c FFF7FEFF 		bl	HAL_TIM_ReadCapturedValue
 192              	.LVL6:
  75:Core/Src/main.c ****         frequency = HAL_RCC_GetPCLK1Freq() / (captureValue - previousCaptureValue);
 193              		.loc 1 75 22 discriminator 1 view .LVU46
 194 0010 074C     		ldr	r4, .L7
 195 0012 2060     		str	r0, [r4]
  76:Core/Src/main.c ****         previousCaptureValue = captureValue;
 196              		.loc 1 76 9 is_stmt 1 view .LVU47
  76:Core/Src/main.c ****         previousCaptureValue = captureValue;
 197              		.loc 1 76 21 is_stmt 0 view .LVU48
 198 0014 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 199              	.LVL7:
  76:Core/Src/main.c ****         previousCaptureValue = captureValue;
 200              		.loc 1 76 60 discriminator 1 view .LVU49
 201 0018 2168     		ldr	r1, [r4]
 202 001a 064D     		ldr	r5, .L7+4
 203 001c 2B68     		ldr	r3, [r5]
 204 001e C91A     		subs	r1, r1, r3
  76:Core/Src/main.c ****         previousCaptureValue = captureValue;
 205              		.loc 1 76 44 discriminator 1 view .LVU50
 206 0020 FFF7FEFF 		bl	__aeabi_uidiv
 207              	.LVL8:
  76:Core/Src/main.c ****         previousCaptureValue = captureValue;
 208              		.loc 1 76 19 discriminator 1 view .LVU51
 209 0024 044B     		ldr	r3, .L7+8
 210 0026 1860     		str	r0, [r3]
  77:Core/Src/main.c ****     }
 211              		.loc 1 77 9 is_stmt 1 view .LVU52
  77:Core/Src/main.c ****     }
 212              		.loc 1 77 30 is_stmt 0 view .LVU53
 213 0028 2368     		ldr	r3, [r4]
 214 002a 2B60     		str	r3, [r5]
  79:Core/Src/main.c **** 
 215              		.loc 1 79 1 view .LVU54
 216 002c ECE7     		b	.L4
 217              	.L8:
ARM GAS  /tmp/ccZOvdLJ.s 			page 12


 218 002e C046     		.align	2
 219              	.L7:
 220 0030 00000000 		.word	captureValue
 221 0034 00000000 		.word	previousCaptureValue
 222 0038 00000000 		.word	frequency
 223              		.cfi_endproc
 224              	.LFE310:
 226              		.section	.text.Error_Handler,"ax",%progbits
 227              		.align	1
 228              		.global	Error_Handler
 229              		.syntax unified
 230              		.code	16
 231              		.thumb_func
 233              	Error_Handler:
 234              	.LFB317:
 397:Core/Src/main.c **** 
 398:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 399:Core/Src/main.c **** 
 400:Core/Src/main.c **** /* USER CODE END 4 */
 401:Core/Src/main.c **** 
 402:Core/Src/main.c **** /**
 403:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 404:Core/Src/main.c ****   * @retval None
 405:Core/Src/main.c ****   */
 406:Core/Src/main.c **** void Error_Handler(void)
 407:Core/Src/main.c **** {
 235              		.loc 1 407 1 is_stmt 1 view -0
 236              		.cfi_startproc
 237              		@ Volatile: function does not return.
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240              		@ link register save eliminated.
 408:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 409:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 410:Core/Src/main.c ****   __disable_irq();
 241              		.loc 1 410 3 view .LVU56
 242              	.LBB8:
 243              	.LBI8:
 244              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
ARM GAS  /tmp/ccZOvdLJ.s 			page 13


  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  /tmp/ccZOvdLJ.s 			page 14


  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccZOvdLJ.s 			page 15


 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccZOvdLJ.s 			page 16


 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 245              		.loc 2 207 27 view .LVU57
 246              	.LBB9:
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 247              		.loc 2 209 3 view .LVU58
 248              		.syntax divided
 249              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 250 0000 72B6     		cpsid i
 251              	@ 0 "" 2
 252              		.thumb
 253              		.syntax unified
 254              	.L10:
 255              	.LBE9:
 256              	.LBE8:
 411:Core/Src/main.c ****   while (1)
 257              		.loc 1 411 3 view .LVU59
 412:Core/Src/main.c ****   {
 413:Core/Src/main.c ****   }
 258              		.loc 1 413 3 view .LVU60
 411:Core/Src/main.c ****   while (1)
 259              		.loc 1 411 9 view .LVU61
 260 0002 FEE7     		b	.L10
 261              		.cfi_endproc
 262              	.LFE317:
 264              		.section	.text.MX_TIM3_Init,"ax",%progbits
 265              		.align	1
 266              		.syntax unified
 267              		.code	16
 268              		.thumb_func
 270              	MX_TIM3_Init:
 271              	.LFB314:
 275:Core/Src/main.c **** 
 272              		.loc 1 275 1 view -0
 273              		.cfi_startproc
 274              		@ args = 0, pretend = 0, frame = 32
 275              		@ frame_needed = 0, uses_anonymous_args = 0
 276 0000 00B5     		push	{lr}
 277              	.LCFI3:
 278              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccZOvdLJ.s 			page 17


 279              		.cfi_offset 14, -4
 280 0002 89B0     		sub	sp, sp, #36
 281              	.LCFI4:
 282              		.cfi_def_cfa_offset 40
 281:Core/Src/main.c ****   TIM_IC_InitTypeDef sConfigIC = {0};
 283              		.loc 1 281 3 view .LVU63
 281:Core/Src/main.c ****   TIM_IC_InitTypeDef sConfigIC = {0};
 284              		.loc 1 281 27 is_stmt 0 view .LVU64
 285 0004 0C22     		movs	r2, #12
 286 0006 0021     		movs	r1, #0
 287 0008 05A8     		add	r0, sp, #20
 288 000a FFF7FEFF 		bl	memset
 289              	.LVL9:
 282:Core/Src/main.c **** 
 290              		.loc 1 282 3 is_stmt 1 view .LVU65
 282:Core/Src/main.c **** 
 291              		.loc 1 282 22 is_stmt 0 view .LVU66
 292 000e 1022     		movs	r2, #16
 293 0010 0021     		movs	r1, #0
 294 0012 01A8     		add	r0, sp, #4
 295 0014 FFF7FEFF 		bl	memset
 296              	.LVL10:
 287:Core/Src/main.c ****   htim3.Init.Prescaler = 127;
 297              		.loc 1 287 3 is_stmt 1 view .LVU67
 287:Core/Src/main.c ****   htim3.Init.Prescaler = 127;
 298              		.loc 1 287 18 is_stmt 0 view .LVU68
 299 0018 1648     		ldr	r0, .L18
 300 001a 174B     		ldr	r3, .L18+4
 301 001c 0360     		str	r3, [r0]
 288:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 302              		.loc 1 288 3 is_stmt 1 view .LVU69
 288:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 303              		.loc 1 288 24 is_stmt 0 view .LVU70
 304 001e 7F23     		movs	r3, #127
 305 0020 4360     		str	r3, [r0, #4]
 289:Core/Src/main.c ****   htim3.Init.Period = 99;
 306              		.loc 1 289 3 is_stmt 1 view .LVU71
 289:Core/Src/main.c ****   htim3.Init.Period = 99;
 307              		.loc 1 289 26 is_stmt 0 view .LVU72
 308 0022 0023     		movs	r3, #0
 309 0024 8360     		str	r3, [r0, #8]
 290:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 310              		.loc 1 290 3 is_stmt 1 view .LVU73
 290:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 311              		.loc 1 290 21 is_stmt 0 view .LVU74
 312 0026 6322     		movs	r2, #99
 313 0028 C260     		str	r2, [r0, #12]
 291:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 314              		.loc 1 291 3 is_stmt 1 view .LVU75
 291:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 315              		.loc 1 291 28 is_stmt 0 view .LVU76
 316 002a 0361     		str	r3, [r0, #16]
 292:Core/Src/main.c ****   if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 317              		.loc 1 292 3 is_stmt 1 view .LVU77
 292:Core/Src/main.c ****   if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 318              		.loc 1 292 32 is_stmt 0 view .LVU78
 319 002c 8361     		str	r3, [r0, #24]
ARM GAS  /tmp/ccZOvdLJ.s 			page 18


 293:Core/Src/main.c ****   {
 320              		.loc 1 293 3 is_stmt 1 view .LVU79
 293:Core/Src/main.c ****   {
 321              		.loc 1 293 7 is_stmt 0 view .LVU80
 322 002e FFF7FEFF 		bl	HAL_TIM_IC_Init
 323              	.LVL11:
 293:Core/Src/main.c ****   {
 324              		.loc 1 293 6 discriminator 1 view .LVU81
 325 0032 0028     		cmp	r0, #0
 326 0034 18D1     		bne	.L15
 297:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 327              		.loc 1 297 3 is_stmt 1 view .LVU82
 297:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 328              		.loc 1 297 37 is_stmt 0 view .LVU83
 329 0036 05A9     		add	r1, sp, #20
 330 0038 0023     		movs	r3, #0
 331 003a 0593     		str	r3, [sp, #20]
 298:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 332              		.loc 1 298 3 is_stmt 1 view .LVU84
 298:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 333              		.loc 1 298 33 is_stmt 0 view .LVU85
 334 003c 8B60     		str	r3, [r1, #8]
 299:Core/Src/main.c ****   {
 335              		.loc 1 299 3 is_stmt 1 view .LVU86
 299:Core/Src/main.c ****   {
 336              		.loc 1 299 7 is_stmt 0 view .LVU87
 337 003e 0D48     		ldr	r0, .L18
 338 0040 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 339              	.LVL12:
 299:Core/Src/main.c ****   {
 340              		.loc 1 299 6 discriminator 1 view .LVU88
 341 0044 0028     		cmp	r0, #0
 342 0046 11D1     		bne	.L16
 303:Core/Src/main.c ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 343              		.loc 1 303 3 is_stmt 1 view .LVU89
 303:Core/Src/main.c ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 344              		.loc 1 303 24 is_stmt 0 view .LVU90
 345 0048 01A9     		add	r1, sp, #4
 346 004a 0A23     		movs	r3, #10
 347 004c 0193     		str	r3, [sp, #4]
 304:Core/Src/main.c ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 348              		.loc 1 304 3 is_stmt 1 view .LVU91
 304:Core/Src/main.c ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 349              		.loc 1 304 25 is_stmt 0 view .LVU92
 350 004e 093B     		subs	r3, r3, #9
 351 0050 4B60     		str	r3, [r1, #4]
 305:Core/Src/main.c ****   sConfigIC.ICFilter = 0;
 352              		.loc 1 305 3 is_stmt 1 view .LVU93
 305:Core/Src/main.c ****   sConfigIC.ICFilter = 0;
 353              		.loc 1 305 25 is_stmt 0 view .LVU94
 354 0052 0023     		movs	r3, #0
 355 0054 8B60     		str	r3, [r1, #8]
 306:Core/Src/main.c ****   if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 356              		.loc 1 306 3 is_stmt 1 view .LVU95
 306:Core/Src/main.c ****   if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 357              		.loc 1 306 22 is_stmt 0 view .LVU96
 358 0056 CB60     		str	r3, [r1, #12]
ARM GAS  /tmp/ccZOvdLJ.s 			page 19


 307:Core/Src/main.c ****   {
 359              		.loc 1 307 3 is_stmt 1 view .LVU97
 307:Core/Src/main.c ****   {
 360              		.loc 1 307 7 is_stmt 0 view .LVU98
 361 0058 0648     		ldr	r0, .L18
 362 005a 0422     		movs	r2, #4
 363 005c FFF7FEFF 		bl	HAL_TIM_IC_ConfigChannel
 364              	.LVL13:
 307:Core/Src/main.c ****   {
 365              		.loc 1 307 6 discriminator 1 view .LVU99
 366 0060 0028     		cmp	r0, #0
 367 0062 05D1     		bne	.L17
 315:Core/Src/main.c **** 
 368              		.loc 1 315 1 view .LVU100
 369 0064 09B0     		add	sp, sp, #36
 370              		@ sp needed
 371 0066 00BD     		pop	{pc}
 372              	.L15:
 295:Core/Src/main.c ****   }
 373              		.loc 1 295 5 is_stmt 1 view .LVU101
 374 0068 FFF7FEFF 		bl	Error_Handler
 375              	.LVL14:
 376              	.L16:
 301:Core/Src/main.c ****   }
 377              		.loc 1 301 5 view .LVU102
 378 006c FFF7FEFF 		bl	Error_Handler
 379              	.LVL15:
 380              	.L17:
 309:Core/Src/main.c ****   }
 381              		.loc 1 309 5 view .LVU103
 382 0070 FFF7FEFF 		bl	Error_Handler
 383              	.LVL16:
 384              	.L19:
 385              		.align	2
 386              	.L18:
 387 0074 00000000 		.word	htim3
 388 0078 00040040 		.word	1073742848
 389              		.cfi_endproc
 390              	.LFE314:
 392              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 393              		.align	1
 394              		.syntax unified
 395              		.code	16
 396              		.thumb_func
 398              	MX_USART1_UART_Init:
 399              	.LFB315:
 323:Core/Src/main.c **** 
 400              		.loc 1 323 1 view -0
 401              		.cfi_startproc
 402              		@ args = 0, pretend = 0, frame = 0
 403              		@ frame_needed = 0, uses_anonymous_args = 0
 404 0000 10B5     		push	{r4, lr}
 405              	.LCFI5:
 406              		.cfi_def_cfa_offset 8
 407              		.cfi_offset 4, -8
 408              		.cfi_offset 14, -4
 332:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
ARM GAS  /tmp/ccZOvdLJ.s 			page 20


 409              		.loc 1 332 3 view .LVU105
 332:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 410              		.loc 1 332 19 is_stmt 0 view .LVU106
 411 0002 1748     		ldr	r0, .L29
 412 0004 174B     		ldr	r3, .L29+4
 413 0006 0360     		str	r3, [r0]
 333:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 414              		.loc 1 333 3 is_stmt 1 view .LVU107
 333:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 415              		.loc 1 333 24 is_stmt 0 view .LVU108
 416 0008 E123     		movs	r3, #225
 417 000a 5B02     		lsls	r3, r3, #9
 418 000c 4360     		str	r3, [r0, #4]
 334:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 419              		.loc 1 334 3 is_stmt 1 view .LVU109
 334:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 420              		.loc 1 334 26 is_stmt 0 view .LVU110
 421 000e 0023     		movs	r3, #0
 422 0010 8360     		str	r3, [r0, #8]
 335:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 423              		.loc 1 335 3 is_stmt 1 view .LVU111
 335:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 424              		.loc 1 335 24 is_stmt 0 view .LVU112
 425 0012 C360     		str	r3, [r0, #12]
 336:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 426              		.loc 1 336 3 is_stmt 1 view .LVU113
 336:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 427              		.loc 1 336 22 is_stmt 0 view .LVU114
 428 0014 0361     		str	r3, [r0, #16]
 337:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 429              		.loc 1 337 3 is_stmt 1 view .LVU115
 337:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 430              		.loc 1 337 20 is_stmt 0 view .LVU116
 431 0016 0C22     		movs	r2, #12
 432 0018 4261     		str	r2, [r0, #20]
 338:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 433              		.loc 1 338 3 is_stmt 1 view .LVU117
 338:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 434              		.loc 1 338 25 is_stmt 0 view .LVU118
 435 001a 8361     		str	r3, [r0, #24]
 339:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 436              		.loc 1 339 3 is_stmt 1 view .LVU119
 339:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 437              		.loc 1 339 28 is_stmt 0 view .LVU120
 438 001c C361     		str	r3, [r0, #28]
 340:Core/Src/main.c ****   huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 439              		.loc 1 340 3 is_stmt 1 view .LVU121
 340:Core/Src/main.c ****   huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 440              		.loc 1 340 30 is_stmt 0 view .LVU122
 441 001e 0362     		str	r3, [r0, #32]
 341:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 442              		.loc 1 341 3 is_stmt 1 view .LVU123
 341:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 443              		.loc 1 341 30 is_stmt 0 view .LVU124
 444 0020 4362     		str	r3, [r0, #36]
 342:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 445              		.loc 1 342 3 is_stmt 1 view .LVU125
ARM GAS  /tmp/ccZOvdLJ.s 			page 21


 342:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 446              		.loc 1 342 38 is_stmt 0 view .LVU126
 447 0022 8362     		str	r3, [r0, #40]
 343:Core/Src/main.c ****   {
 448              		.loc 1 343 3 is_stmt 1 view .LVU127
 343:Core/Src/main.c ****   {
 449              		.loc 1 343 7 is_stmt 0 view .LVU128
 450 0024 FFF7FEFF 		bl	HAL_UART_Init
 451              	.LVL17:
 343:Core/Src/main.c ****   {
 452              		.loc 1 343 6 discriminator 1 view .LVU129
 453 0028 0028     		cmp	r0, #0
 454 002a 11D1     		bne	.L25
 347:Core/Src/main.c ****   {
 455              		.loc 1 347 3 is_stmt 1 view .LVU130
 347:Core/Src/main.c ****   {
 456              		.loc 1 347 7 is_stmt 0 view .LVU131
 457 002c 0C48     		ldr	r0, .L29
 458 002e 0021     		movs	r1, #0
 459 0030 FFF7FEFF 		bl	HAL_UARTEx_SetTxFifoThreshold
 460              	.LVL18:
 347:Core/Src/main.c ****   {
 461              		.loc 1 347 6 discriminator 1 view .LVU132
 462 0034 0028     		cmp	r0, #0
 463 0036 0DD1     		bne	.L26
 351:Core/Src/main.c ****   {
 464              		.loc 1 351 3 is_stmt 1 view .LVU133
 351:Core/Src/main.c ****   {
 465              		.loc 1 351 7 is_stmt 0 view .LVU134
 466 0038 0948     		ldr	r0, .L29
 467 003a 0021     		movs	r1, #0
 468 003c FFF7FEFF 		bl	HAL_UARTEx_SetRxFifoThreshold
 469              	.LVL19:
 351:Core/Src/main.c ****   {
 470              		.loc 1 351 6 discriminator 1 view .LVU135
 471 0040 0028     		cmp	r0, #0
 472 0042 09D1     		bne	.L27
 355:Core/Src/main.c ****   {
 473              		.loc 1 355 3 is_stmt 1 view .LVU136
 355:Core/Src/main.c ****   {
 474              		.loc 1 355 7 is_stmt 0 view .LVU137
 475 0044 0648     		ldr	r0, .L29
 476 0046 FFF7FEFF 		bl	HAL_UARTEx_DisableFifoMode
 477              	.LVL20:
 355:Core/Src/main.c ****   {
 478              		.loc 1 355 6 discriminator 1 view .LVU138
 479 004a 0028     		cmp	r0, #0
 480 004c 06D1     		bne	.L28
 363:Core/Src/main.c **** 
 481              		.loc 1 363 1 view .LVU139
 482              		@ sp needed
 483 004e 10BD     		pop	{r4, pc}
 484              	.L25:
 345:Core/Src/main.c ****   }
 485              		.loc 1 345 5 is_stmt 1 view .LVU140
 486 0050 FFF7FEFF 		bl	Error_Handler
 487              	.LVL21:
ARM GAS  /tmp/ccZOvdLJ.s 			page 22


 488              	.L26:
 349:Core/Src/main.c ****   }
 489              		.loc 1 349 5 view .LVU141
 490 0054 FFF7FEFF 		bl	Error_Handler
 491              	.LVL22:
 492              	.L27:
 353:Core/Src/main.c ****   }
 493              		.loc 1 353 5 view .LVU142
 494 0058 FFF7FEFF 		bl	Error_Handler
 495              	.LVL23:
 496              	.L28:
 357:Core/Src/main.c ****   }
 497              		.loc 1 357 5 view .LVU143
 498 005c FFF7FEFF 		bl	Error_Handler
 499              	.LVL24:
 500              	.L30:
 501              		.align	2
 502              	.L29:
 503 0060 00000000 		.word	huart1
 504 0064 00380140 		.word	1073821696
 505              		.cfi_endproc
 506              	.LFE315:
 508              		.section	.text.MX_TIM1_Init,"ax",%progbits
 509              		.align	1
 510              		.syntax unified
 511              		.code	16
 512              		.thumb_func
 514              	MX_TIM1_Init:
 515              	.LFB313:
 203:Core/Src/main.c **** 
 516              		.loc 1 203 1 view -0
 517              		.cfi_startproc
 518              		@ args = 0, pretend = 0, frame = 96
 519              		@ frame_needed = 0, uses_anonymous_args = 0
 520 0000 00B5     		push	{lr}
 521              	.LCFI6:
 522              		.cfi_def_cfa_offset 4
 523              		.cfi_offset 14, -4
 524 0002 99B0     		sub	sp, sp, #100
 525              	.LCFI7:
 526              		.cfi_def_cfa_offset 104
 209:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 527              		.loc 1 209 3 view .LVU145
 209:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 528              		.loc 1 209 27 is_stmt 0 view .LVU146
 529 0004 0C22     		movs	r2, #12
 530 0006 0021     		movs	r1, #0
 531 0008 15A8     		add	r0, sp, #84
 532 000a FFF7FEFF 		bl	memset
 533              	.LVL25:
 210:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 534              		.loc 1 210 3 is_stmt 1 view .LVU147
 210:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 535              		.loc 1 210 22 is_stmt 0 view .LVU148
 536 000e 1C22     		movs	r2, #28
 537 0010 0021     		movs	r1, #0
 538 0012 0EA8     		add	r0, sp, #56
ARM GAS  /tmp/ccZOvdLJ.s 			page 23


 539 0014 FFF7FEFF 		bl	memset
 540              	.LVL26:
 211:Core/Src/main.c **** 
 541              		.loc 1 211 3 is_stmt 1 view .LVU149
 211:Core/Src/main.c **** 
 542              		.loc 1 211 34 is_stmt 0 view .LVU150
 543 0018 3422     		movs	r2, #52
 544 001a 0021     		movs	r1, #0
 545 001c 01A8     		add	r0, sp, #4
 546 001e FFF7FEFF 		bl	memset
 547              	.LVL27:
 216:Core/Src/main.c ****   htim1.Init.Prescaler = 0;
 548              		.loc 1 216 3 is_stmt 1 view .LVU151
 216:Core/Src/main.c ****   htim1.Init.Prescaler = 0;
 549              		.loc 1 216 18 is_stmt 0 view .LVU152
 550 0022 2748     		ldr	r0, .L40
 551 0024 274B     		ldr	r3, .L40+4
 552 0026 0360     		str	r3, [r0]
 217:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 553              		.loc 1 217 3 is_stmt 1 view .LVU153
 217:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 554              		.loc 1 217 24 is_stmt 0 view .LVU154
 555 0028 0023     		movs	r3, #0
 556 002a 4360     		str	r3, [r0, #4]
 218:Core/Src/main.c ****   htim1.Init.Period = 65535;
 557              		.loc 1 218 3 is_stmt 1 view .LVU155
 218:Core/Src/main.c ****   htim1.Init.Period = 65535;
 558              		.loc 1 218 26 is_stmt 0 view .LVU156
 559 002c 8360     		str	r3, [r0, #8]
 219:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 560              		.loc 1 219 3 is_stmt 1 view .LVU157
 219:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 561              		.loc 1 219 21 is_stmt 0 view .LVU158
 562 002e 264A     		ldr	r2, .L40+8
 563 0030 C260     		str	r2, [r0, #12]
 220:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 564              		.loc 1 220 3 is_stmt 1 view .LVU159
 220:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 565              		.loc 1 220 28 is_stmt 0 view .LVU160
 566 0032 0361     		str	r3, [r0, #16]
 221:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 567              		.loc 1 221 3 is_stmt 1 view .LVU161
 221:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 568              		.loc 1 221 32 is_stmt 0 view .LVU162
 569 0034 4361     		str	r3, [r0, #20]
 222:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 570              		.loc 1 222 3 is_stmt 1 view .LVU163
 222:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 571              		.loc 1 222 32 is_stmt 0 view .LVU164
 572 0036 8361     		str	r3, [r0, #24]
 223:Core/Src/main.c ****   {
 573              		.loc 1 223 3 is_stmt 1 view .LVU165
 223:Core/Src/main.c ****   {
 574              		.loc 1 223 7 is_stmt 0 view .LVU166
 575 0038 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 576              	.LVL28:
 223:Core/Src/main.c ****   {
ARM GAS  /tmp/ccZOvdLJ.s 			page 24


 577              		.loc 1 223 6 discriminator 1 view .LVU167
 578 003c 0028     		cmp	r0, #0
 579 003e 36D1     		bne	.L36
 227:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 580              		.loc 1 227 3 is_stmt 1 view .LVU168
 227:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 581              		.loc 1 227 37 is_stmt 0 view .LVU169
 582 0040 15A9     		add	r1, sp, #84
 583 0042 0023     		movs	r3, #0
 584 0044 1593     		str	r3, [sp, #84]
 228:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 585              		.loc 1 228 3 is_stmt 1 view .LVU170
 228:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 586              		.loc 1 228 38 is_stmt 0 view .LVU171
 587 0046 4B60     		str	r3, [r1, #4]
 229:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 588              		.loc 1 229 3 is_stmt 1 view .LVU172
 229:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 589              		.loc 1 229 33 is_stmt 0 view .LVU173
 590 0048 8B60     		str	r3, [r1, #8]
 230:Core/Src/main.c ****   {
 591              		.loc 1 230 3 is_stmt 1 view .LVU174
 230:Core/Src/main.c ****   {
 592              		.loc 1 230 7 is_stmt 0 view .LVU175
 593 004a 1D48     		ldr	r0, .L40
 594 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 595              	.LVL29:
 230:Core/Src/main.c ****   {
 596              		.loc 1 230 6 discriminator 1 view .LVU176
 597 0050 0028     		cmp	r0, #0
 598 0052 2ED1     		bne	.L37
 234:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 599              		.loc 1 234 3 is_stmt 1 view .LVU177
 234:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 600              		.loc 1 234 20 is_stmt 0 view .LVU178
 601 0054 0EA9     		add	r1, sp, #56
 602 0056 6023     		movs	r3, #96
 603 0058 0E93     		str	r3, [sp, #56]
 235:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 604              		.loc 1 235 3 is_stmt 1 view .LVU179
 235:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 605              		.loc 1 235 19 is_stmt 0 view .LVU180
 606 005a 0023     		movs	r3, #0
 607 005c 4B60     		str	r3, [r1, #4]
 236:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 608              		.loc 1 236 3 is_stmt 1 view .LVU181
 236:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 609              		.loc 1 236 24 is_stmt 0 view .LVU182
 610 005e 8B60     		str	r3, [r1, #8]
 237:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 611              		.loc 1 237 3 is_stmt 1 view .LVU183
 237:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 612              		.loc 1 237 25 is_stmt 0 view .LVU184
 613 0060 CB60     		str	r3, [r1, #12]
 238:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 614              		.loc 1 238 3 is_stmt 1 view .LVU185
 238:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
ARM GAS  /tmp/ccZOvdLJ.s 			page 25


 615              		.loc 1 238 24 is_stmt 0 view .LVU186
 616 0062 0B61     		str	r3, [r1, #16]
 239:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 617              		.loc 1 239 3 is_stmt 1 view .LVU187
 239:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 618              		.loc 1 239 25 is_stmt 0 view .LVU188
 619 0064 4B61     		str	r3, [r1, #20]
 240:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 620              		.loc 1 240 3 is_stmt 1 view .LVU189
 240:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 621              		.loc 1 240 26 is_stmt 0 view .LVU190
 622 0066 8B61     		str	r3, [r1, #24]
 241:Core/Src/main.c ****   {
 623              		.loc 1 241 3 is_stmt 1 view .LVU191
 241:Core/Src/main.c ****   {
 624              		.loc 1 241 7 is_stmt 0 view .LVU192
 625 0068 1548     		ldr	r0, .L40
 626 006a 0022     		movs	r2, #0
 627 006c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 628              	.LVL30:
 241:Core/Src/main.c ****   {
 629              		.loc 1 241 6 discriminator 1 view .LVU193
 630 0070 0028     		cmp	r0, #0
 631 0072 20D1     		bne	.L38
 245:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 632              		.loc 1 245 3 is_stmt 1 view .LVU194
 245:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 633              		.loc 1 245 40 is_stmt 0 view .LVU195
 634 0074 01A9     		add	r1, sp, #4
 635 0076 0023     		movs	r3, #0
 636 0078 0193     		str	r3, [sp, #4]
 246:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 637              		.loc 1 246 3 is_stmt 1 view .LVU196
 246:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 638              		.loc 1 246 41 is_stmt 0 view .LVU197
 639 007a 4B60     		str	r3, [r1, #4]
 247:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 640              		.loc 1 247 3 is_stmt 1 view .LVU198
 247:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 641              		.loc 1 247 34 is_stmt 0 view .LVU199
 642 007c 8B60     		str	r3, [r1, #8]
 248:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 643              		.loc 1 248 3 is_stmt 1 view .LVU200
 248:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 644              		.loc 1 248 33 is_stmt 0 view .LVU201
 645 007e CB60     		str	r3, [r1, #12]
 249:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 646              		.loc 1 249 3 is_stmt 1 view .LVU202
 249:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 647              		.loc 1 249 35 is_stmt 0 view .LVU203
 648 0080 0B61     		str	r3, [r1, #16]
 250:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 649              		.loc 1 250 3 is_stmt 1 view .LVU204
 250:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 650              		.loc 1 250 38 is_stmt 0 view .LVU205
 651 0082 8022     		movs	r2, #128
 652 0084 9201     		lsls	r2, r2, #6
ARM GAS  /tmp/ccZOvdLJ.s 			page 26


 653 0086 4A61     		str	r2, [r1, #20]
 251:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 654              		.loc 1 251 3 is_stmt 1 view .LVU206
 251:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 655              		.loc 1 251 36 is_stmt 0 view .LVU207
 656 0088 8B61     		str	r3, [r1, #24]
 252:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 657              		.loc 1 252 3 is_stmt 1 view .LVU208
 252:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 658              		.loc 1 252 36 is_stmt 0 view .LVU209
 659 008a CB61     		str	r3, [r1, #28]
 253:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 660              		.loc 1 253 3 is_stmt 1 view .LVU210
 253:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 661              		.loc 1 253 36 is_stmt 0 view .LVU211
 662 008c 0B62     		str	r3, [r1, #32]
 254:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 663              		.loc 1 254 3 is_stmt 1 view .LVU212
 254:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 664              		.loc 1 254 39 is_stmt 0 view .LVU213
 665 008e 8022     		movs	r2, #128
 666 0090 9204     		lsls	r2, r2, #18
 667 0092 4A62     		str	r2, [r1, #36]
 255:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 668              		.loc 1 255 3 is_stmt 1 view .LVU214
 255:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 669              		.loc 1 255 37 is_stmt 0 view .LVU215
 670 0094 8B62     		str	r3, [r1, #40]
 256:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 671              		.loc 1 256 3 is_stmt 1 view .LVU216
 256:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 672              		.loc 1 256 37 is_stmt 0 view .LVU217
 673 0096 CB62     		str	r3, [r1, #44]
 257:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 674              		.loc 1 257 3 is_stmt 1 view .LVU218
 257:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 675              		.loc 1 257 40 is_stmt 0 view .LVU219
 676 0098 0B63     		str	r3, [r1, #48]
 258:Core/Src/main.c ****   {
 677              		.loc 1 258 3 is_stmt 1 view .LVU220
 258:Core/Src/main.c ****   {
 678              		.loc 1 258 7 is_stmt 0 view .LVU221
 679 009a 0948     		ldr	r0, .L40
 680 009c FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 681              	.LVL31:
 258:Core/Src/main.c ****   {
 682              		.loc 1 258 6 discriminator 1 view .LVU222
 683 00a0 0028     		cmp	r0, #0
 684 00a2 0AD1     		bne	.L39
 265:Core/Src/main.c **** 
 685              		.loc 1 265 3 is_stmt 1 view .LVU223
 686 00a4 0648     		ldr	r0, .L40
 687 00a6 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 688              	.LVL32:
 267:Core/Src/main.c **** 
 689              		.loc 1 267 1 is_stmt 0 view .LVU224
 690 00aa 19B0     		add	sp, sp, #100
ARM GAS  /tmp/ccZOvdLJ.s 			page 27


 691              		@ sp needed
 692 00ac 00BD     		pop	{pc}
 693              	.L36:
 225:Core/Src/main.c ****   }
 694              		.loc 1 225 5 is_stmt 1 view .LVU225
 695 00ae FFF7FEFF 		bl	Error_Handler
 696              	.LVL33:
 697              	.L37:
 232:Core/Src/main.c ****   }
 698              		.loc 1 232 5 view .LVU226
 699 00b2 FFF7FEFF 		bl	Error_Handler
 700              	.LVL34:
 701              	.L38:
 243:Core/Src/main.c ****   }
 702              		.loc 1 243 5 view .LVU227
 703 00b6 FFF7FEFF 		bl	Error_Handler
 704              	.LVL35:
 705              	.L39:
 260:Core/Src/main.c ****   }
 706              		.loc 1 260 5 view .LVU228
 707 00ba FFF7FEFF 		bl	Error_Handler
 708              	.LVL36:
 709              	.L41:
 710 00be C046     		.align	2
 711              	.L40:
 712 00c0 00000000 		.word	htim1
 713 00c4 002C0140 		.word	1073818624
 714 00c8 FFFF0000 		.word	65535
 715              		.cfi_endproc
 716              	.LFE313:
 718              		.section	.text.SystemClock_Config,"ax",%progbits
 719              		.align	1
 720              		.global	SystemClock_Config
 721              		.syntax unified
 722              		.code	16
 723              		.thumb_func
 725              	SystemClock_Config:
 726              	.LFB312:
 159:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 727              		.loc 1 159 1 view -0
 728              		.cfi_startproc
 729              		@ args = 0, pretend = 0, frame = 72
 730              		@ frame_needed = 0, uses_anonymous_args = 0
 731 0000 10B5     		push	{r4, lr}
 732              	.LCFI8:
 733              		.cfi_def_cfa_offset 8
 734              		.cfi_offset 4, -8
 735              		.cfi_offset 14, -4
 736 0002 92B0     		sub	sp, sp, #72
 737              	.LCFI9:
 738              		.cfi_def_cfa_offset 80
 160:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 739              		.loc 1 160 3 view .LVU230
 160:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 740              		.loc 1 160 22 is_stmt 0 view .LVU231
 741 0004 05AC     		add	r4, sp, #20
 742 0006 3422     		movs	r2, #52
ARM GAS  /tmp/ccZOvdLJ.s 			page 28


 743 0008 0021     		movs	r1, #0
 744 000a 2000     		movs	r0, r4
 745 000c FFF7FEFF 		bl	memset
 746              	.LVL37:
 161:Core/Src/main.c **** 
 747              		.loc 1 161 3 is_stmt 1 view .LVU232
 161:Core/Src/main.c **** 
 748              		.loc 1 161 22 is_stmt 0 view .LVU233
 749 0010 1022     		movs	r2, #16
 750 0012 0021     		movs	r1, #0
 751 0014 01A8     		add	r0, sp, #4
 752 0016 FFF7FEFF 		bl	memset
 753              	.LVL38:
 165:Core/Src/main.c **** 
 754              		.loc 1 165 3 is_stmt 1 view .LVU234
 755 001a 8020     		movs	r0, #128
 756 001c 8000     		lsls	r0, r0, #2
 757 001e FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
 758              	.LVL39:
 170:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 759              		.loc 1 170 3 view .LVU235
 170:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 760              		.loc 1 170 36 is_stmt 0 view .LVU236
 761 0022 0123     		movs	r3, #1
 762 0024 0593     		str	r3, [sp, #20]
 171:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 763              		.loc 1 171 3 is_stmt 1 view .LVU237
 171:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 764              		.loc 1 171 30 is_stmt 0 view .LVU238
 765 0026 8023     		movs	r3, #128
 766 0028 5B02     		lsls	r3, r3, #9
 767 002a 0693     		str	r3, [sp, #24]
 172:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 768              		.loc 1 172 3 is_stmt 1 view .LVU239
 172:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 769              		.loc 1 172 34 is_stmt 0 view .LVU240
 770 002c 0223     		movs	r3, #2
 771 002e 0C93     		str	r3, [sp, #48]
 173:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 772              		.loc 1 173 3 is_stmt 1 view .LVU241
 173:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 773              		.loc 1 173 35 is_stmt 0 view .LVU242
 774 0030 0133     		adds	r3, r3, #1
 775 0032 0D93     		str	r3, [sp, #52]
 174:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 8;
 776              		.loc 1 174 3 is_stmt 1 view .LVU243
 174:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 8;
 777              		.loc 1 174 30 is_stmt 0 view .LVU244
 778 0034 0023     		movs	r3, #0
 779 0036 0E93     		str	r3, [sp, #56]
 175:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 780              		.loc 1 175 3 is_stmt 1 view .LVU245
 175:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 781              		.loc 1 175 30 is_stmt 0 view .LVU246
 782 0038 0833     		adds	r3, r3, #8
 783 003a 0F93     		str	r3, [sp, #60]
 176:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
ARM GAS  /tmp/ccZOvdLJ.s 			page 29


 784              		.loc 1 176 3 is_stmt 1 view .LVU247
 176:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 785              		.loc 1 176 30 is_stmt 0 view .LVU248
 786 003c 8023     		movs	r3, #128
 787 003e 9B02     		lsls	r3, r3, #10
 788 0040 1093     		str	r3, [sp, #64]
 177:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 789              		.loc 1 177 3 is_stmt 1 view .LVU249
 177:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 790              		.loc 1 177 30 is_stmt 0 view .LVU250
 791 0042 8023     		movs	r3, #128
 792 0044 9B05     		lsls	r3, r3, #22
 793 0046 1193     		str	r3, [sp, #68]
 178:Core/Src/main.c ****   {
 794              		.loc 1 178 3 is_stmt 1 view .LVU251
 178:Core/Src/main.c ****   {
 795              		.loc 1 178 7 is_stmt 0 view .LVU252
 796 0048 2000     		movs	r0, r4
 797 004a FFF7FEFF 		bl	HAL_RCC_OscConfig
 798              	.LVL40:
 178:Core/Src/main.c ****   {
 799              		.loc 1 178 6 discriminator 1 view .LVU253
 800 004e 0028     		cmp	r0, #0
 801 0050 0ED1     		bne	.L45
 185:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 802              		.loc 1 185 3 is_stmt 1 view .LVU254
 185:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 803              		.loc 1 185 31 is_stmt 0 view .LVU255
 804 0052 01A8     		add	r0, sp, #4
 805 0054 0723     		movs	r3, #7
 806 0056 0193     		str	r3, [sp, #4]
 187:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 807              		.loc 1 187 3 is_stmt 1 view .LVU256
 187:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 808              		.loc 1 187 34 is_stmt 0 view .LVU257
 809 0058 053B     		subs	r3, r3, #5
 810 005a 4360     		str	r3, [r0, #4]
 188:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 811              		.loc 1 188 3 is_stmt 1 view .LVU258
 188:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 812              		.loc 1 188 35 is_stmt 0 view .LVU259
 813 005c 0023     		movs	r3, #0
 814 005e 8360     		str	r3, [r0, #8]
 189:Core/Src/main.c **** 
 815              		.loc 1 189 3 is_stmt 1 view .LVU260
 189:Core/Src/main.c **** 
 816              		.loc 1 189 36 is_stmt 0 view .LVU261
 817 0060 C360     		str	r3, [r0, #12]
 191:Core/Src/main.c ****   {
 818              		.loc 1 191 3 is_stmt 1 view .LVU262
 191:Core/Src/main.c ****   {
 819              		.loc 1 191 7 is_stmt 0 view .LVU263
 820 0062 0221     		movs	r1, #2
 821 0064 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 822              	.LVL41:
 191:Core/Src/main.c ****   {
 823              		.loc 1 191 6 discriminator 1 view .LVU264
ARM GAS  /tmp/ccZOvdLJ.s 			page 30


 824 0068 0028     		cmp	r0, #0
 825 006a 03D1     		bne	.L46
 195:Core/Src/main.c **** 
 826              		.loc 1 195 1 view .LVU265
 827 006c 12B0     		add	sp, sp, #72
 828              		@ sp needed
 829 006e 10BD     		pop	{r4, pc}
 830              	.L45:
 180:Core/Src/main.c ****   }
 831              		.loc 1 180 5 is_stmt 1 view .LVU266
 832 0070 FFF7FEFF 		bl	Error_Handler
 833              	.LVL42:
 834              	.L46:
 193:Core/Src/main.c ****   }
 835              		.loc 1 193 5 view .LVU267
 836 0074 FFF7FEFF 		bl	Error_Handler
 837              	.LVL43:
 838              		.cfi_endproc
 839              	.LFE312:
 841              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 842              		.align	2
 843              	.LC10:
 844 0000 46726571 		.ascii	"Frequency is %d \012\000"
 844      75656E63 
 844      79206973 
 844      20256420 
 844      0A00
 845              		.section	.text.main,"ax",%progbits
 846              		.align	1
 847              		.global	main
 848              		.syntax unified
 849              		.code	16
 850              		.thumb_func
 852              	main:
 853              	.LFB311:
  89:Core/Src/main.c **** 
 854              		.loc 1 89 1 view -0
 855              		.cfi_startproc
 856              		@ Volatile: function does not return.
 857              		@ args = 0, pretend = 0, frame = 0
 858              		@ frame_needed = 0, uses_anonymous_args = 0
 859 0000 10B5     		push	{r4, lr}
 860              	.LCFI10:
 861              		.cfi_def_cfa_offset 8
 862              		.cfi_offset 4, -8
 863              		.cfi_offset 14, -4
  98:Core/Src/main.c **** 
 864              		.loc 1 98 3 view .LVU269
 865 0002 FFF7FEFF 		bl	HAL_Init
 866              	.LVL44:
 105:Core/Src/main.c **** 
 867              		.loc 1 105 3 view .LVU270
 868 0006 FFF7FEFF 		bl	SystemClock_Config
 869              	.LVL45:
 112:Core/Src/main.c ****   MX_TIM3_Init();
 870              		.loc 1 112 3 view .LVU271
 871 000a FFF7FEFF 		bl	MX_GPIO_Init
ARM GAS  /tmp/ccZOvdLJ.s 			page 31


 872              	.LVL46:
 113:Core/Src/main.c ****   MX_USART1_UART_Init();
 873              		.loc 1 113 3 view .LVU272
 874 000e FFF7FEFF 		bl	MX_TIM3_Init
 875              	.LVL47:
 114:Core/Src/main.c ****   MX_TIM1_Init();
 876              		.loc 1 114 3 view .LVU273
 877 0012 FFF7FEFF 		bl	MX_USART1_UART_Init
 878              	.LVL48:
 115:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 879              		.loc 1 115 3 view .LVU274
 880 0016 FFF7FEFF 		bl	MX_TIM1_Init
 881              	.LVL49:
 121:Core/Src/main.c ****   logging_set_message_frequency(2000);
 882              		.loc 1 121 3 view .LVU275
 883 001a 1148     		ldr	r0, .L49
 884 001c FFF7FEFF 		bl	logging_subsystem_init
 885              	.LVL50:
 122:Core/Src/main.c **** 
 886              		.loc 1 122 3 view .LVU276
 887 0020 FA20     		movs	r0, #250
 888 0022 C000     		lsls	r0, r0, #3
 889 0024 FFF7FEFF 		bl	logging_set_message_frequency
 890              	.LVL51:
 126:Core/Src/main.c ****   heartbeat_on(&heartbeat_led);
 891              		.loc 1 126 3 view .LVU277
 892 0028 0E4C     		ldr	r4, .L49+4
 893 002a 0F49     		ldr	r1, .L49+8
 894 002c 2000     		movs	r0, r4
 895 002e FFF7FEFF 		bl	heartbeat_initialize
 896              	.LVL52:
 127:Core/Src/main.c **** 
 897              		.loc 1 127 3 view .LVU278
 898 0032 2000     		movs	r0, r4
 899 0034 FFF7FEFF 		bl	heartbeat_on
 900              	.LVL53:
 131:Core/Src/main.c **** 
 901              		.loc 1 131 3 view .LVU279
 902 0038 0C48     		ldr	r0, .L49+12
 903 003a 0421     		movs	r1, #4
 904 003c FFF7FEFF 		bl	HAL_TIM_IC_Start_IT
 905              	.LVL54:
 906              	.L48:
 140:Core/Src/main.c ****   {
 907              		.loc 1 140 3 view .LVU280
 146:Core/Src/main.c ****     logging_send_periodic_msg(HAL_GetTick(), "Frequency is %d \n", frequency);
 908              		.loc 1 146 5 view .LVU281
 909 0040 FFF7FEFF 		bl	HAL_GetTick
 910              	.LVL55:
 911 0044 0100     		movs	r1, r0
 146:Core/Src/main.c ****     logging_send_periodic_msg(HAL_GetTick(), "Frequency is %d \n", frequency);
 912              		.loc 1 146 5 is_stmt 0 discriminator 1 view .LVU282
 913 0046 074B     		ldr	r3, .L49+4
 914 0048 1800     		movs	r0, r3
 915 004a FFF7FEFF 		bl	heartbeat_toggle
 916              	.LVL56:
 147:Core/Src/main.c **** 
ARM GAS  /tmp/ccZOvdLJ.s 			page 32


 917              		.loc 1 147 5 is_stmt 1 discriminator 1 view .LVU283
 918 004e FFF7FEFF 		bl	HAL_GetTick
 919              	.LVL57:
 920 0052 074B     		ldr	r3, .L49+16
 921 0054 1A68     		ldr	r2, [r3]
 922 0056 0749     		ldr	r1, .L49+20
 923 0058 FFF7FEFF 		bl	logging_send_periodic_msg
 924              	.LVL58:
 140:Core/Src/main.c ****   {
 925              		.loc 1 140 9 view .LVU284
 926 005c F0E7     		b	.L48
 927              	.L50:
 928 005e C046     		.align	2
 929              	.L49:
 930 0060 00000000 		.word	huart1
 931 0064 00000000 		.word	heartbeat_led
 932 0068 30750000 		.word	30000
 933 006c 00000000 		.word	htim3
 934 0070 00000000 		.word	frequency
 935 0074 00000000 		.word	.LC10
 936              		.cfi_endproc
 937              	.LFE311:
 939              		.global	frequency
 940              		.section	.bss.frequency,"aw",%nobits
 941              		.align	2
 944              	frequency:
 945 0000 00000000 		.space	4
 946              		.global	previousCaptureValue
 947              		.section	.bss.previousCaptureValue,"aw",%nobits
 948              		.align	2
 951              	previousCaptureValue:
 952 0000 00000000 		.space	4
 953              		.global	captureValue
 954              		.section	.bss.captureValue,"aw",%nobits
 955              		.align	2
 958              	captureValue:
 959 0000 00000000 		.space	4
 960              		.section	.data.cnt,"aw"
 963              	cnt:
 964 0000 03       		.byte	3
 965              		.section	.bss.heartbeat_led,"aw",%nobits
 966              		.align	2
 969              	heartbeat_led:
 970 0000 00000000 		.space	8
 970      00000000 
 971              		.global	huart1
 972              		.section	.bss.huart1,"aw",%nobits
 973              		.align	2
 976              	huart1:
 977 0000 00000000 		.space	148
 977      00000000 
 977      00000000 
 977      00000000 
 977      00000000 
 978              		.global	htim3
 979              		.section	.bss.htim3,"aw",%nobits
 980              		.align	2
ARM GAS  /tmp/ccZOvdLJ.s 			page 33


 983              	htim3:
 984 0000 00000000 		.space	76
 984      00000000 
 984      00000000 
 984      00000000 
 984      00000000 
 985              		.global	htim1
 986              		.section	.bss.htim1,"aw",%nobits
 987              		.align	2
 990              	htim1:
 991 0000 00000000 		.space	76
 991      00000000 
 991      00000000 
 991      00000000 
 991      00000000 
 992              		.text
 993              	.Letext0:
 994              		.file 3 "/home/achraf/Desktop/Toolchain/arm-gnu-toolchain-14.3.rel1-x86_64-arm-none-eabi/arm-none-
 995              		.file 4 "/home/achraf/Desktop/Toolchain/arm-gnu-toolchain-14.3.rel1-x86_64-arm-none-eabi/arm-none-
 996              		.file 5 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/stm32g070xx.h"
 997              		.file 6 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_def.h"
 998              		.file 7 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_rcc.h"
 999              		.file 8 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_gpio.h"
 1000              		.file 9 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_dma.h"
 1001              		.file 10 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_tim.h"
 1002              		.file 11 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_uart.h"
 1003              		.file 12 "Core/Inc/heartbeat.h"
 1004              		.file 13 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h"
 1005              		.file 14 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_pwr_ex.h"
 1006              		.file 15 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_tim_ex.h"
 1007              		.file 16 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_uart_ex.h"
 1008              		.file 17 "Core/Inc/main.h"
 1009              		.file 18 "Core/Inc/logging.h"
 1010              		.file 19 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal.h"
 1011              		.file 20 "<built-in>"
ARM GAS  /tmp/ccZOvdLJ.s 			page 34


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccZOvdLJ.s:19     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccZOvdLJ.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccZOvdLJ.s:148    .text.MX_GPIO_Init:00000078 $d
     /tmp/ccZOvdLJ.s:154    .text.HAL_TIM_IC_CaptureCallback:00000000 $t
     /tmp/ccZOvdLJ.s:160    .text.HAL_TIM_IC_CaptureCallback:00000000 HAL_TIM_IC_CaptureCallback
     /tmp/ccZOvdLJ.s:220    .text.HAL_TIM_IC_CaptureCallback:00000030 $d
     /tmp/ccZOvdLJ.s:958    .bss.captureValue:00000000 captureValue
     /tmp/ccZOvdLJ.s:951    .bss.previousCaptureValue:00000000 previousCaptureValue
     /tmp/ccZOvdLJ.s:944    .bss.frequency:00000000 frequency
     /tmp/ccZOvdLJ.s:227    .text.Error_Handler:00000000 $t
     /tmp/ccZOvdLJ.s:233    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccZOvdLJ.s:265    .text.MX_TIM3_Init:00000000 $t
     /tmp/ccZOvdLJ.s:270    .text.MX_TIM3_Init:00000000 MX_TIM3_Init
     /tmp/ccZOvdLJ.s:387    .text.MX_TIM3_Init:00000074 $d
     /tmp/ccZOvdLJ.s:983    .bss.htim3:00000000 htim3
     /tmp/ccZOvdLJ.s:393    .text.MX_USART1_UART_Init:00000000 $t
     /tmp/ccZOvdLJ.s:398    .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
     /tmp/ccZOvdLJ.s:503    .text.MX_USART1_UART_Init:00000060 $d
     /tmp/ccZOvdLJ.s:976    .bss.huart1:00000000 huart1
     /tmp/ccZOvdLJ.s:509    .text.MX_TIM1_Init:00000000 $t
     /tmp/ccZOvdLJ.s:514    .text.MX_TIM1_Init:00000000 MX_TIM1_Init
     /tmp/ccZOvdLJ.s:712    .text.MX_TIM1_Init:000000c0 $d
     /tmp/ccZOvdLJ.s:990    .bss.htim1:00000000 htim1
     /tmp/ccZOvdLJ.s:719    .text.SystemClock_Config:00000000 $t
     /tmp/ccZOvdLJ.s:725    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccZOvdLJ.s:842    .rodata.main.str1.4:00000000 $d
     /tmp/ccZOvdLJ.s:846    .text.main:00000000 $t
     /tmp/ccZOvdLJ.s:852    .text.main:00000000 main
     /tmp/ccZOvdLJ.s:930    .text.main:00000060 $d
     /tmp/ccZOvdLJ.s:969    .bss.heartbeat_led:00000000 heartbeat_led
     /tmp/ccZOvdLJ.s:941    .bss.frequency:00000000 $d
     /tmp/ccZOvdLJ.s:948    .bss.previousCaptureValue:00000000 $d
     /tmp/ccZOvdLJ.s:955    .bss.captureValue:00000000 $d
     /tmp/ccZOvdLJ.s:963    .data.cnt:00000000 cnt
     /tmp/ccZOvdLJ.s:966    .bss.heartbeat_led:00000000 $d
     /tmp/ccZOvdLJ.s:973    .bss.huart1:00000000 $d
     /tmp/ccZOvdLJ.s:980    .bss.htim3:00000000 $d
     /tmp/ccZOvdLJ.s:987    .bss.htim1:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_TIM_ReadCapturedValue
HAL_RCC_GetPCLK1Freq
__aeabi_uidiv
HAL_TIM_IC_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_IC_ConfigChannel
HAL_UART_Init
HAL_UARTEx_SetTxFifoThreshold
HAL_UARTEx_SetRxFifoThreshold
HAL_UARTEx_DisableFifoMode
HAL_TIM_PWM_Init
HAL_TIM_PWM_ConfigChannel
ARM GAS  /tmp/ccZOvdLJ.s 			page 35


HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_PWREx_ControlVoltageScaling
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
logging_subsystem_init
logging_set_message_frequency
heartbeat_initialize
heartbeat_on
HAL_TIM_IC_Start_IT
HAL_GetTick
heartbeat_toggle
logging_send_periodic_msg
